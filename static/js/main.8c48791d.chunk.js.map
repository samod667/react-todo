{"version":3,"sources":["components/TodoItem.jsx","components/TodoList.jsx","components/TodoInput.jsx","App.js","serviceWorker.js","index.js"],"names":["TodoItem","styles","cursor","this","props","title","handleDelete","handleEdit","className","style","onClick","Component","TodoList","items","clearList","map","item","key","id","type","TodoInput","handleChange","handleSubmit","editItem","onSubmit","value","onChange","placeholder","App","state","uuid","e","setState","target","preventDefault","newItem","updatedItems","filteredItems","filter","selectedItem","find","React","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.8c48791d.chunk.js","sourcesContent":["import React, { Component } from 'react'\n\nexport default class TodoItem extends Component {\n\n    render() {\n         const styles = {\n           cursor: \"pointer\",\n         };\n\n        const {title, handleDelete, handleEdit} = this.props\n        return (\n            <li className=\"list-group-item text-capitalize d-flex justify-content-between border-black\">\n            <h6>{title}</h6>\n            <div className=\"todo-icon\">\n                <span className=\"mx-2 text-success\" style={styles} onClick={handleEdit}><i className=\"fas fa-pen\"></i></span>\n                <span className=\"mx-2 text-danger\" style={styles} onClick={handleDelete}><i className=\"fas fa-trash\"></i></span>\n            </div>\n            </li>   \n        )\n    }\n}\n","import React, { Component } from 'react'\nimport TodoItem from './TodoItem';\n\nexport default class TodoList extends Component {\n    render() {\n        const { items, clearList, handleDelete, handleEdit } = this.props;\n        return (\n            <ul className=\"list-group my-5\">\n            <h3 className=\"text-capitalize text-center\">My Todo's</h3>\n            {\n                items.map(item => {\n                    return <TodoItem key={item.id} title={item.title} handleDelete={() => handleDelete(item.id)} handleEdit={() => handleEdit(item.id)}/>;\n                })\n            }\n            <button onClick={clearList} type=\"button\" className=\"btn btn-danger btn-block text-capitalize mt-5\">Clear List</button>\n            </ul>\n        )\n    }\n}\n","import React, { Component } from \"react\";\n\nexport default class TodoInput extends Component {\n\n  render() {\n      const {item, handleChange, handleSubmit, editItem} = this.props;\n    return (\n      <div className=\"container card-body my-3\">\n        <form onSubmit={handleSubmit}>\n          <div className=\"input-group\">\n            <div className=\"input-group-prepend\">\n              <div className=\"input-group-text bg-primary text-white\">\n                <i className=\"fas fa-book\"></i>\n              </div>\n            </div>\n            <input\n              value={item}\n              onChange={handleChange}\n              type=\"text\"\n              className=\"form-control text-capitalize\"\n              placeholder=\"Add todo item\"\n            />\n          </div>\n          <button\n            type=\"submit\"\n            className={\n              editItem\n                ? \"btn btn-block btn-success mt-3\"\n                : \"btn btn-block btn-primary mt-3\"\n            }>\n            {editItem ? \"Edit Item\" : \"Add Item\"}\n          </button>\n        </form>\n      </div>\n    );\n  }\n}\n","import React from \"react\";\n\nimport TodoList from \"./components/TodoList\";\n\nimport \"bootstrap/dist/css/bootstrap.min.css\";\nimport uuid from 'uuid/dist/v4'\nimport TodoInput from \"./components/TodoInput\";\n\nclass App extends React.Component {\n  state = {\n    items: [],\n    id: uuid(),\n    item: '',\n    editItem: false\n\n  }\n\n  handleChange = (e) => {\n    this.setState({\n      item: e.target.value\n    })\n  }\n\n  handleSubmit = (e) => {\n    e.preventDefault();\n\n    const newItem = {\n      id: this.state.id,\n      title: this.state.item\n    }\n    // console.log(newItem);\n    \n\n    const updatedItems = [...this.state.items, newItem];\n\n    this.setState({\n      items: updatedItems,\n      item: '',\n      id: uuid(),\n      editItem: false\n\n    })\n  }\n\n  clearList = () => {\n    this.setState({\n      items: []\n    })\n  }\n\n  handleDelete = (id) => {\n    const filteredItems = this.state.items.filter(item => item.id !== id)\n\n    this.setState({\n      items: filteredItems\n    })\n  }\n\n  handleEdit = (id) => {\n    // console.log(id);\n    const filteredItems = this.state.items.filter((item) => item.id !== id);\n\n    const selectedItem = this.state.items.find(item => item.id === id);\n    \n    this.setState({\n      items: filteredItems,\n      item: selectedItem.title,\n      editItem: true,\n      id: id\n    })\n  }\n\n  render() {\n    return (\n      <div className=\"container\">\n        <div className=\"row\">\n          <div className=\"col col-10 mx-auto col-md-8 mt-4\">\n            <TodoInput item={this.state.item} handleChange={this.handleChange} handleSubmit={this.handleSubmit} editItem={this.state.editItem}/>\n            <TodoList items={this.state.items} clearList={this.clearList} handleDelete={this.handleDelete} handleEdit={this.handleEdit}/>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}